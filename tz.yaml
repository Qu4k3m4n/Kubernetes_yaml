apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-test
spec:
  selector:
    matchLabels:
      app: my-test
  template:
    metadata:
      labels:
        app: my-test
    spec:
      affinity:
        podAntiAffinity: # Размещает поды в разных зонах
          requiredDuringSchedulingIgnoredDuringExecution:
          - topologyKey: "topology.kubernetes.io/zone"
          labelSelector:
            matchLabels:
              app: my-test
      containers:
      - name: my-test-container
        image: my-test-image:1
        resources:
          requests: # Заданные в условиях выделяемые ресурсы
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 500m # На первые запросы приложению требуется значительно больше ресурсов CPU
            memory: 160Mi # Оставляем запас
        ports:
        - containerPort: 80
      readinessProbe: # Непрерывная проверка готовности пода
        httpGet:
          path: /health
          port: 80
        initialDelaySeconds: 15 # Задержка перед первой проверкой с запасом
        periodSeconds: 15 # Периодичность проверок
      livenessProbe: # Перезапускает нездоровые поды
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 15
          periodSeconds: 15
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: my-test-hpa
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: my-test
  minReplicas: 3 # Минимальное количество, для нахождения в каждой зоне 1 пода(для ночной нагрузки) 
  maxReplicas: 5 # По результатам тестирования 4х подов хватает для пиковой нагрузки, больше на случай отказа зоны
  metrics:
  - type: Resource # Ресурсы заданы ранее
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70 # Cреднее использование CPU подов на уровне 70%, желательно указывать меньше, но думаю это будет баланс с учетом заданных условий
        apiVersion: v1
---
kind: Service
metadata:
  name: my-test-service
spec:
  selector:
    app: my-test
  ports:
  - protocol: TCP
    port: 80
    targetPort: 80
  type: LoadBalancer